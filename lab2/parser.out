Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> blocks
Rule 2     blocks -> blocks block
Rule 3     blocks -> <empty>
Rule 4     block -> declaration
Rule 5     block -> fundef
Rule 6     block -> instruction
Rule 7     declarations -> declarations declaration
Rule 8     declarations -> <empty>
Rule 9     declaration -> TYPE inits ;
Rule 10    declaration -> error ;
Rule 11    inits -> inits , init
Rule 12    inits -> init
Rule 13    init -> ID = expression
Rule 14    instructions_opt -> instructions
Rule 15    instructions_opt -> <empty>
Rule 16    instructions -> instructions instruction
Rule 17    instructions -> instruction
Rule 18    instruction -> print_instr
Rule 19    instruction -> labeled_instr
Rule 20    instruction -> assignment
Rule 21    instruction -> choice_instr
Rule 22    instruction -> while_instr
Rule 23    instruction -> repeat_instr
Rule 24    instruction -> return_instr
Rule 25    instruction -> break_instr
Rule 26    instruction -> continue_instr
Rule 27    instruction -> compound_instr
Rule 28    instruction -> expression ;
Rule 29    print_instr -> PRINT expr_list ;
Rule 30    print_instr -> PRINT error ;
Rule 31    labeled_instr -> ID : instruction
Rule 32    assignment -> ID = expression ;
Rule 33    choice_instr -> IF ( condition ) instruction
Rule 34    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 35    choice_instr -> IF ( error ) instruction
Rule 36    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 37    while_instr -> WHILE ( condition ) instruction
Rule 38    while_instr -> WHILE ( error ) instruction
Rule 39    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 40    return_instr -> RETURN expression ;
Rule 41    continue_instr -> CONTINUE ;
Rule 42    break_instr -> BREAK ;
Rule 43    compound_instr -> { declarations instructions_opt }
Rule 44    condition -> expression
Rule 45    const -> INTEGER
Rule 46    const -> FLOAT
Rule 47    const -> STRING
Rule 48    expression -> const
Rule 49    expression -> ID
Rule 50    expression -> expression + expression
Rule 51    expression -> expression - expression
Rule 52    expression -> expression * expression
Rule 53    expression -> expression / expression
Rule 54    expression -> expression % expression
Rule 55    expression -> expression | expression
Rule 56    expression -> expression & expression
Rule 57    expression -> expression ^ expression
Rule 58    expression -> expression AND expression
Rule 59    expression -> expression OR expression
Rule 60    expression -> expression SHL expression
Rule 61    expression -> expression SHR expression
Rule 62    expression -> expression EQ expression
Rule 63    expression -> expression NEQ expression
Rule 64    expression -> expression > expression
Rule 65    expression -> expression < expression
Rule 66    expression -> expression LE expression
Rule 67    expression -> expression GE expression
Rule 68    expression -> ( expression )
Rule 69    expression -> ( error )
Rule 70    expression -> ID ( expr_list_or_empty )
Rule 71    expression -> ID ( error )
Rule 72    expr_list_or_empty -> expr_list
Rule 73    expr_list_or_empty -> <empty>
Rule 74    expr_list -> expr_list , expression
Rule 75    expr_list -> expression
Rule 76    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 77    args_list_or_empty -> args_list
Rule 78    args_list_or_empty -> <empty>
Rule 79    args_list -> args_list , arg
Rule 80    args_list -> arg
Rule 81    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 54
&                    : 56
(                    : 33 34 35 36 37 38 68 69 70 71 76
)                    : 33 34 35 36 37 38 68 69 70 71 76
*                    : 52
+                    : 50
,                    : 11 74 79
-                    : 51
/                    : 53
:                    : 31
;                    : 9 10 28 29 30 32 39 40 41 42
<                    : 65
=                    : 13 32
>                    : 64
AND                  : 58
BREAK                : 42
CONTINUE             : 41
ELSE                 : 34 36
EQ                   : 62
FLOAT                : 46
GE                   : 67
ID                   : 13 31 32 49 70 71 76 81
IF                   : 33 34 35 36
INTEGER              : 45
LE                   : 66
NEQ                  : 63
OR                   : 59
PRINT                : 29 30
REPEAT               : 39
RETURN               : 40
SHL                  : 60
SHR                  : 61
STRING               : 47
TYPE                 : 9 76 81
UNTIL                : 39
WHILE                : 37 38
^                    : 57
error                : 10 30 35 36 38 69 71
{                    : 43
|                    : 55
}                    : 43

Nonterminals, with rules where they appear

arg                  : 79 80
args_list            : 77 79
args_list_or_empty   : 76
assignment           : 20
block                : 2
blocks               : 1 2
break_instr          : 25
choice_instr         : 21
compound_instr       : 27 76
condition            : 33 34 37 39
const                : 48
continue_instr       : 26
declaration          : 4 7
declarations         : 7 43
expr_list            : 29 72 74
expr_list_or_empty   : 70
expression           : 13 28 32 40 44 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 74 75
fundef               : 5
init                 : 11 12
inits                : 9 11
instruction          : 6 16 17 31 33 34 34 35 36 36 37 38
instructions         : 14 16 39
instructions_opt     : 43
labeled_instr        : 19
print_instr          : 18
program              : 0
repeat_instr         : 23
return_instr         : 24
while_instr          : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . blocks
    (2) blocks -> . blocks block
    (3) blocks -> .

    TYPE            reduce using rule 3 (blocks -> .)
    error           reduce using rule 3 (blocks -> .)
    PRINT           reduce using rule 3 (blocks -> .)
    ID              reduce using rule 3 (blocks -> .)
    IF              reduce using rule 3 (blocks -> .)
    WHILE           reduce using rule 3 (blocks -> .)
    REPEAT          reduce using rule 3 (blocks -> .)
    RETURN          reduce using rule 3 (blocks -> .)
    BREAK           reduce using rule 3 (blocks -> .)
    CONTINUE        reduce using rule 3 (blocks -> .)
    {               reduce using rule 3 (blocks -> .)
    (               reduce using rule 3 (blocks -> .)
    INTEGER         reduce using rule 3 (blocks -> .)
    FLOAT           reduce using rule 3 (blocks -> .)
    STRING          reduce using rule 3 (blocks -> .)
    $end            reduce using rule 3 (blocks -> .)

    program                        shift and go to state 1
    blocks                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> blocks .
    (2) blocks -> blocks . block
    (4) block -> . declaration
    (5) block -> . fundef
    (6) block -> . instruction
    (9) declaration -> . TYPE inits ;
    (10) declaration -> . error ;
    (76) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    $end            reduce using rule 1 (program -> blocks .)
    TYPE            shift and go to state 12
    error           shift and go to state 18
    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 3
    assignment                     shift and go to state 4
    continue_instr                 shift and go to state 19
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20
    while_instr                    shift and go to state 9
    instruction                    shift and go to state 22
    print_instr                    shift and go to state 8
    fundef                         shift and go to state 24
    break_instr                    shift and go to state 10
    choice_instr                   shift and go to state 28
    declaration                    shift and go to state 21
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    block                          shift and go to state 14
    const                          shift and go to state 27

state 3

    (28) instruction -> expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 51
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 4

    (20) instruction -> assignment .

    TYPE            reduce using rule 20 (instruction -> assignment .)
    error           reduce using rule 20 (instruction -> assignment .)
    PRINT           reduce using rule 20 (instruction -> assignment .)
    ID              reduce using rule 20 (instruction -> assignment .)
    IF              reduce using rule 20 (instruction -> assignment .)
    WHILE           reduce using rule 20 (instruction -> assignment .)
    REPEAT          reduce using rule 20 (instruction -> assignment .)
    RETURN          reduce using rule 20 (instruction -> assignment .)
    BREAK           reduce using rule 20 (instruction -> assignment .)
    CONTINUE        reduce using rule 20 (instruction -> assignment .)
    {               reduce using rule 20 (instruction -> assignment .)
    (               reduce using rule 20 (instruction -> assignment .)
    INTEGER         reduce using rule 20 (instruction -> assignment .)
    FLOAT           reduce using rule 20 (instruction -> assignment .)
    STRING          reduce using rule 20 (instruction -> assignment .)
    $end            reduce using rule 20 (instruction -> assignment .)
    UNTIL           reduce using rule 20 (instruction -> assignment .)
    }               reduce using rule 20 (instruction -> assignment .)
    ELSE            reduce using rule 20 (instruction -> assignment .)


state 5

    (31) labeled_instr -> ID . : instruction
    (32) assignment -> ID . = expression ;
    (49) expression -> ID .
    (70) expression -> ID . ( expr_list_or_empty )
    (71) expression -> ID . ( error )

    :               shift and go to state 53
    =               shift and go to state 55
    ;               reduce using rule 49 (expression -> ID .)
    +               reduce using rule 49 (expression -> ID .)
    -               reduce using rule 49 (expression -> ID .)
    *               reduce using rule 49 (expression -> ID .)
    /               reduce using rule 49 (expression -> ID .)
    %               reduce using rule 49 (expression -> ID .)
    |               reduce using rule 49 (expression -> ID .)
    &               reduce using rule 49 (expression -> ID .)
    ^               reduce using rule 49 (expression -> ID .)
    AND             reduce using rule 49 (expression -> ID .)
    OR              reduce using rule 49 (expression -> ID .)
    SHL             reduce using rule 49 (expression -> ID .)
    SHR             reduce using rule 49 (expression -> ID .)
    EQ              reduce using rule 49 (expression -> ID .)
    NEQ             reduce using rule 49 (expression -> ID .)
    >               reduce using rule 49 (expression -> ID .)
    <               reduce using rule 49 (expression -> ID .)
    LE              reduce using rule 49 (expression -> ID .)
    GE              reduce using rule 49 (expression -> ID .)
    (               shift and go to state 54


state 6

    (29) print_instr -> PRINT . expr_list ;
    (30) print_instr -> PRINT . error ;
    (74) expr_list -> . expr_list , expression
    (75) expr_list -> . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    error           shift and go to state 57
    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 56
    expr_list                      shift and go to state 58
    const                          shift and go to state 27

state 7

    (42) break_instr -> BREAK . ;

    ;               shift and go to state 60


state 8

    (18) instruction -> print_instr .

    TYPE            reduce using rule 18 (instruction -> print_instr .)
    error           reduce using rule 18 (instruction -> print_instr .)
    PRINT           reduce using rule 18 (instruction -> print_instr .)
    ID              reduce using rule 18 (instruction -> print_instr .)
    IF              reduce using rule 18 (instruction -> print_instr .)
    WHILE           reduce using rule 18 (instruction -> print_instr .)
    REPEAT          reduce using rule 18 (instruction -> print_instr .)
    RETURN          reduce using rule 18 (instruction -> print_instr .)
    BREAK           reduce using rule 18 (instruction -> print_instr .)
    CONTINUE        reduce using rule 18 (instruction -> print_instr .)
    {               reduce using rule 18 (instruction -> print_instr .)
    (               reduce using rule 18 (instruction -> print_instr .)
    INTEGER         reduce using rule 18 (instruction -> print_instr .)
    FLOAT           reduce using rule 18 (instruction -> print_instr .)
    STRING          reduce using rule 18 (instruction -> print_instr .)
    $end            reduce using rule 18 (instruction -> print_instr .)
    UNTIL           reduce using rule 18 (instruction -> print_instr .)
    }               reduce using rule 18 (instruction -> print_instr .)
    ELSE            reduce using rule 18 (instruction -> print_instr .)


state 9

    (22) instruction -> while_instr .

    TYPE            reduce using rule 22 (instruction -> while_instr .)
    error           reduce using rule 22 (instruction -> while_instr .)
    PRINT           reduce using rule 22 (instruction -> while_instr .)
    ID              reduce using rule 22 (instruction -> while_instr .)
    IF              reduce using rule 22 (instruction -> while_instr .)
    WHILE           reduce using rule 22 (instruction -> while_instr .)
    REPEAT          reduce using rule 22 (instruction -> while_instr .)
    RETURN          reduce using rule 22 (instruction -> while_instr .)
    BREAK           reduce using rule 22 (instruction -> while_instr .)
    CONTINUE        reduce using rule 22 (instruction -> while_instr .)
    {               reduce using rule 22 (instruction -> while_instr .)
    (               reduce using rule 22 (instruction -> while_instr .)
    INTEGER         reduce using rule 22 (instruction -> while_instr .)
    FLOAT           reduce using rule 22 (instruction -> while_instr .)
    STRING          reduce using rule 22 (instruction -> while_instr .)
    $end            reduce using rule 22 (instruction -> while_instr .)
    UNTIL           reduce using rule 22 (instruction -> while_instr .)
    }               reduce using rule 22 (instruction -> while_instr .)
    ELSE            reduce using rule 22 (instruction -> while_instr .)


state 10

    (25) instruction -> break_instr .

    TYPE            reduce using rule 25 (instruction -> break_instr .)
    error           reduce using rule 25 (instruction -> break_instr .)
    PRINT           reduce using rule 25 (instruction -> break_instr .)
    ID              reduce using rule 25 (instruction -> break_instr .)
    IF              reduce using rule 25 (instruction -> break_instr .)
    WHILE           reduce using rule 25 (instruction -> break_instr .)
    REPEAT          reduce using rule 25 (instruction -> break_instr .)
    RETURN          reduce using rule 25 (instruction -> break_instr .)
    BREAK           reduce using rule 25 (instruction -> break_instr .)
    CONTINUE        reduce using rule 25 (instruction -> break_instr .)
    {               reduce using rule 25 (instruction -> break_instr .)
    (               reduce using rule 25 (instruction -> break_instr .)
    INTEGER         reduce using rule 25 (instruction -> break_instr .)
    FLOAT           reduce using rule 25 (instruction -> break_instr .)
    STRING          reduce using rule 25 (instruction -> break_instr .)
    $end            reduce using rule 25 (instruction -> break_instr .)
    UNTIL           reduce using rule 25 (instruction -> break_instr .)
    }               reduce using rule 25 (instruction -> break_instr .)
    ELSE            reduce using rule 25 (instruction -> break_instr .)


state 11

    (19) instruction -> labeled_instr .

    TYPE            reduce using rule 19 (instruction -> labeled_instr .)
    error           reduce using rule 19 (instruction -> labeled_instr .)
    PRINT           reduce using rule 19 (instruction -> labeled_instr .)
    ID              reduce using rule 19 (instruction -> labeled_instr .)
    IF              reduce using rule 19 (instruction -> labeled_instr .)
    WHILE           reduce using rule 19 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 19 (instruction -> labeled_instr .)
    RETURN          reduce using rule 19 (instruction -> labeled_instr .)
    BREAK           reduce using rule 19 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 19 (instruction -> labeled_instr .)
    {               reduce using rule 19 (instruction -> labeled_instr .)
    (               reduce using rule 19 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 19 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 19 (instruction -> labeled_instr .)
    STRING          reduce using rule 19 (instruction -> labeled_instr .)
    $end            reduce using rule 19 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 19 (instruction -> labeled_instr .)
    }               reduce using rule 19 (instruction -> labeled_instr .)
    ELSE            reduce using rule 19 (instruction -> labeled_instr .)


state 12

    (9) declaration -> TYPE . inits ;
    (76) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (11) inits -> . inits , init
    (12) inits -> . init
    (13) init -> . ID = expression

    ID              shift and go to state 61

    init                           shift and go to state 63
    inits                          shift and go to state 62

state 13

    (39) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (16) instructions -> . instructions instruction
    (17) instructions -> . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 65
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20
    instructions                   shift and go to state 64

state 14

    (2) blocks -> blocks block .

    TYPE            reduce using rule 2 (blocks -> blocks block .)
    error           reduce using rule 2 (blocks -> blocks block .)
    PRINT           reduce using rule 2 (blocks -> blocks block .)
    ID              reduce using rule 2 (blocks -> blocks block .)
    IF              reduce using rule 2 (blocks -> blocks block .)
    WHILE           reduce using rule 2 (blocks -> blocks block .)
    REPEAT          reduce using rule 2 (blocks -> blocks block .)
    RETURN          reduce using rule 2 (blocks -> blocks block .)
    BREAK           reduce using rule 2 (blocks -> blocks block .)
    CONTINUE        reduce using rule 2 (blocks -> blocks block .)
    {               reduce using rule 2 (blocks -> blocks block .)
    (               reduce using rule 2 (blocks -> blocks block .)
    INTEGER         reduce using rule 2 (blocks -> blocks block .)
    FLOAT           reduce using rule 2 (blocks -> blocks block .)
    STRING          reduce using rule 2 (blocks -> blocks block .)
    $end            reduce using rule 2 (blocks -> blocks block .)


state 15

    (37) while_instr -> WHILE . ( condition ) instruction
    (38) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 66


state 16

    (68) expression -> ( . expression )
    (69) expression -> ( . error )
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    error           shift and go to state 68
    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 67
    const                          shift and go to state 27

state 17

    (47) const -> STRING .

    +               reduce using rule 47 (const -> STRING .)
    -               reduce using rule 47 (const -> STRING .)
    *               reduce using rule 47 (const -> STRING .)
    /               reduce using rule 47 (const -> STRING .)
    %               reduce using rule 47 (const -> STRING .)
    |               reduce using rule 47 (const -> STRING .)
    &               reduce using rule 47 (const -> STRING .)
    ^               reduce using rule 47 (const -> STRING .)
    AND             reduce using rule 47 (const -> STRING .)
    OR              reduce using rule 47 (const -> STRING .)
    SHL             reduce using rule 47 (const -> STRING .)
    SHR             reduce using rule 47 (const -> STRING .)
    EQ              reduce using rule 47 (const -> STRING .)
    NEQ             reduce using rule 47 (const -> STRING .)
    >               reduce using rule 47 (const -> STRING .)
    <               reduce using rule 47 (const -> STRING .)
    LE              reduce using rule 47 (const -> STRING .)
    GE              reduce using rule 47 (const -> STRING .)
    ;               reduce using rule 47 (const -> STRING .)
    ,               reduce using rule 47 (const -> STRING .)
    )               reduce using rule 47 (const -> STRING .)


state 18

    (10) declaration -> error . ;

    ;               shift and go to state 69


state 19

    (26) instruction -> continue_instr .

    TYPE            reduce using rule 26 (instruction -> continue_instr .)
    error           reduce using rule 26 (instruction -> continue_instr .)
    PRINT           reduce using rule 26 (instruction -> continue_instr .)
    ID              reduce using rule 26 (instruction -> continue_instr .)
    IF              reduce using rule 26 (instruction -> continue_instr .)
    WHILE           reduce using rule 26 (instruction -> continue_instr .)
    REPEAT          reduce using rule 26 (instruction -> continue_instr .)
    RETURN          reduce using rule 26 (instruction -> continue_instr .)
    BREAK           reduce using rule 26 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 26 (instruction -> continue_instr .)
    {               reduce using rule 26 (instruction -> continue_instr .)
    (               reduce using rule 26 (instruction -> continue_instr .)
    INTEGER         reduce using rule 26 (instruction -> continue_instr .)
    FLOAT           reduce using rule 26 (instruction -> continue_instr .)
    STRING          reduce using rule 26 (instruction -> continue_instr .)
    $end            reduce using rule 26 (instruction -> continue_instr .)
    UNTIL           reduce using rule 26 (instruction -> continue_instr .)
    }               reduce using rule 26 (instruction -> continue_instr .)
    ELSE            reduce using rule 26 (instruction -> continue_instr .)


state 20

    (27) instruction -> compound_instr .

    TYPE            reduce using rule 27 (instruction -> compound_instr .)
    error           reduce using rule 27 (instruction -> compound_instr .)
    PRINT           reduce using rule 27 (instruction -> compound_instr .)
    ID              reduce using rule 27 (instruction -> compound_instr .)
    IF              reduce using rule 27 (instruction -> compound_instr .)
    WHILE           reduce using rule 27 (instruction -> compound_instr .)
    REPEAT          reduce using rule 27 (instruction -> compound_instr .)
    RETURN          reduce using rule 27 (instruction -> compound_instr .)
    BREAK           reduce using rule 27 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 27 (instruction -> compound_instr .)
    {               reduce using rule 27 (instruction -> compound_instr .)
    (               reduce using rule 27 (instruction -> compound_instr .)
    INTEGER         reduce using rule 27 (instruction -> compound_instr .)
    FLOAT           reduce using rule 27 (instruction -> compound_instr .)
    STRING          reduce using rule 27 (instruction -> compound_instr .)
    $end            reduce using rule 27 (instruction -> compound_instr .)
    UNTIL           reduce using rule 27 (instruction -> compound_instr .)
    }               reduce using rule 27 (instruction -> compound_instr .)
    ELSE            reduce using rule 27 (instruction -> compound_instr .)


state 21

    (4) block -> declaration .

    TYPE            reduce using rule 4 (block -> declaration .)
    error           reduce using rule 4 (block -> declaration .)
    PRINT           reduce using rule 4 (block -> declaration .)
    ID              reduce using rule 4 (block -> declaration .)
    IF              reduce using rule 4 (block -> declaration .)
    WHILE           reduce using rule 4 (block -> declaration .)
    REPEAT          reduce using rule 4 (block -> declaration .)
    RETURN          reduce using rule 4 (block -> declaration .)
    BREAK           reduce using rule 4 (block -> declaration .)
    CONTINUE        reduce using rule 4 (block -> declaration .)
    {               reduce using rule 4 (block -> declaration .)
    (               reduce using rule 4 (block -> declaration .)
    INTEGER         reduce using rule 4 (block -> declaration .)
    FLOAT           reduce using rule 4 (block -> declaration .)
    STRING          reduce using rule 4 (block -> declaration .)
    $end            reduce using rule 4 (block -> declaration .)


state 22

    (6) block -> instruction .

    TYPE            reduce using rule 6 (block -> instruction .)
    error           reduce using rule 6 (block -> instruction .)
    PRINT           reduce using rule 6 (block -> instruction .)
    ID              reduce using rule 6 (block -> instruction .)
    IF              reduce using rule 6 (block -> instruction .)
    WHILE           reduce using rule 6 (block -> instruction .)
    REPEAT          reduce using rule 6 (block -> instruction .)
    RETURN          reduce using rule 6 (block -> instruction .)
    BREAK           reduce using rule 6 (block -> instruction .)
    CONTINUE        reduce using rule 6 (block -> instruction .)
    {               reduce using rule 6 (block -> instruction .)
    (               reduce using rule 6 (block -> instruction .)
    INTEGER         reduce using rule 6 (block -> instruction .)
    FLOAT           reduce using rule 6 (block -> instruction .)
    STRING          reduce using rule 6 (block -> instruction .)
    $end            reduce using rule 6 (block -> instruction .)


state 23

    (40) return_instr -> RETURN . expression ;
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 70
    const                          shift and go to state 27

state 24

    (5) block -> fundef .

    TYPE            reduce using rule 5 (block -> fundef .)
    error           reduce using rule 5 (block -> fundef .)
    PRINT           reduce using rule 5 (block -> fundef .)
    ID              reduce using rule 5 (block -> fundef .)
    IF              reduce using rule 5 (block -> fundef .)
    WHILE           reduce using rule 5 (block -> fundef .)
    REPEAT          reduce using rule 5 (block -> fundef .)
    RETURN          reduce using rule 5 (block -> fundef .)
    BREAK           reduce using rule 5 (block -> fundef .)
    CONTINUE        reduce using rule 5 (block -> fundef .)
    {               reduce using rule 5 (block -> fundef .)
    (               reduce using rule 5 (block -> fundef .)
    INTEGER         reduce using rule 5 (block -> fundef .)
    FLOAT           reduce using rule 5 (block -> fundef .)
    STRING          reduce using rule 5 (block -> fundef .)
    $end            reduce using rule 5 (block -> fundef .)


state 25

    (41) continue_instr -> CONTINUE . ;

    ;               shift and go to state 71


state 26

    (33) choice_instr -> IF . ( condition ) instruction
    (34) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (35) choice_instr -> IF . ( error ) instruction
    (36) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 72


state 27

    (48) expression -> const .

    +               reduce using rule 48 (expression -> const .)
    -               reduce using rule 48 (expression -> const .)
    *               reduce using rule 48 (expression -> const .)
    /               reduce using rule 48 (expression -> const .)
    %               reduce using rule 48 (expression -> const .)
    |               reduce using rule 48 (expression -> const .)
    &               reduce using rule 48 (expression -> const .)
    ^               reduce using rule 48 (expression -> const .)
    AND             reduce using rule 48 (expression -> const .)
    OR              reduce using rule 48 (expression -> const .)
    SHL             reduce using rule 48 (expression -> const .)
    SHR             reduce using rule 48 (expression -> const .)
    EQ              reduce using rule 48 (expression -> const .)
    NEQ             reduce using rule 48 (expression -> const .)
    >               reduce using rule 48 (expression -> const .)
    <               reduce using rule 48 (expression -> const .)
    LE              reduce using rule 48 (expression -> const .)
    GE              reduce using rule 48 (expression -> const .)
    ;               reduce using rule 48 (expression -> const .)
    ,               reduce using rule 48 (expression -> const .)
    )               reduce using rule 48 (expression -> const .)


state 28

    (21) instruction -> choice_instr .

    TYPE            reduce using rule 21 (instruction -> choice_instr .)
    error           reduce using rule 21 (instruction -> choice_instr .)
    PRINT           reduce using rule 21 (instruction -> choice_instr .)
    ID              reduce using rule 21 (instruction -> choice_instr .)
    IF              reduce using rule 21 (instruction -> choice_instr .)
    WHILE           reduce using rule 21 (instruction -> choice_instr .)
    REPEAT          reduce using rule 21 (instruction -> choice_instr .)
    RETURN          reduce using rule 21 (instruction -> choice_instr .)
    BREAK           reduce using rule 21 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 21 (instruction -> choice_instr .)
    {               reduce using rule 21 (instruction -> choice_instr .)
    (               reduce using rule 21 (instruction -> choice_instr .)
    INTEGER         reduce using rule 21 (instruction -> choice_instr .)
    FLOAT           reduce using rule 21 (instruction -> choice_instr .)
    STRING          reduce using rule 21 (instruction -> choice_instr .)
    $end            reduce using rule 21 (instruction -> choice_instr .)
    UNTIL           reduce using rule 21 (instruction -> choice_instr .)
    }               reduce using rule 21 (instruction -> choice_instr .)
    ELSE            reduce using rule 21 (instruction -> choice_instr .)


state 29

    (46) const -> FLOAT .

    +               reduce using rule 46 (const -> FLOAT .)
    -               reduce using rule 46 (const -> FLOAT .)
    *               reduce using rule 46 (const -> FLOAT .)
    /               reduce using rule 46 (const -> FLOAT .)
    %               reduce using rule 46 (const -> FLOAT .)
    |               reduce using rule 46 (const -> FLOAT .)
    &               reduce using rule 46 (const -> FLOAT .)
    ^               reduce using rule 46 (const -> FLOAT .)
    AND             reduce using rule 46 (const -> FLOAT .)
    OR              reduce using rule 46 (const -> FLOAT .)
    SHL             reduce using rule 46 (const -> FLOAT .)
    SHR             reduce using rule 46 (const -> FLOAT .)
    EQ              reduce using rule 46 (const -> FLOAT .)
    NEQ             reduce using rule 46 (const -> FLOAT .)
    >               reduce using rule 46 (const -> FLOAT .)
    <               reduce using rule 46 (const -> FLOAT .)
    LE              reduce using rule 46 (const -> FLOAT .)
    GE              reduce using rule 46 (const -> FLOAT .)
    ;               reduce using rule 46 (const -> FLOAT .)
    ,               reduce using rule 46 (const -> FLOAT .)
    )               reduce using rule 46 (const -> FLOAT .)


state 30

    (24) instruction -> return_instr .

    TYPE            reduce using rule 24 (instruction -> return_instr .)
    error           reduce using rule 24 (instruction -> return_instr .)
    PRINT           reduce using rule 24 (instruction -> return_instr .)
    ID              reduce using rule 24 (instruction -> return_instr .)
    IF              reduce using rule 24 (instruction -> return_instr .)
    WHILE           reduce using rule 24 (instruction -> return_instr .)
    REPEAT          reduce using rule 24 (instruction -> return_instr .)
    RETURN          reduce using rule 24 (instruction -> return_instr .)
    BREAK           reduce using rule 24 (instruction -> return_instr .)
    CONTINUE        reduce using rule 24 (instruction -> return_instr .)
    {               reduce using rule 24 (instruction -> return_instr .)
    (               reduce using rule 24 (instruction -> return_instr .)
    INTEGER         reduce using rule 24 (instruction -> return_instr .)
    FLOAT           reduce using rule 24 (instruction -> return_instr .)
    STRING          reduce using rule 24 (instruction -> return_instr .)
    $end            reduce using rule 24 (instruction -> return_instr .)
    UNTIL           reduce using rule 24 (instruction -> return_instr .)
    }               reduce using rule 24 (instruction -> return_instr .)
    ELSE            reduce using rule 24 (instruction -> return_instr .)


state 31

    (23) instruction -> repeat_instr .

    TYPE            reduce using rule 23 (instruction -> repeat_instr .)
    error           reduce using rule 23 (instruction -> repeat_instr .)
    PRINT           reduce using rule 23 (instruction -> repeat_instr .)
    ID              reduce using rule 23 (instruction -> repeat_instr .)
    IF              reduce using rule 23 (instruction -> repeat_instr .)
    WHILE           reduce using rule 23 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 23 (instruction -> repeat_instr .)
    RETURN          reduce using rule 23 (instruction -> repeat_instr .)
    BREAK           reduce using rule 23 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 23 (instruction -> repeat_instr .)
    {               reduce using rule 23 (instruction -> repeat_instr .)
    (               reduce using rule 23 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 23 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 23 (instruction -> repeat_instr .)
    STRING          reduce using rule 23 (instruction -> repeat_instr .)
    $end            reduce using rule 23 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 23 (instruction -> repeat_instr .)
    }               reduce using rule 23 (instruction -> repeat_instr .)
    ELSE            reduce using rule 23 (instruction -> repeat_instr .)


state 32

    (45) const -> INTEGER .

    +               reduce using rule 45 (const -> INTEGER .)
    -               reduce using rule 45 (const -> INTEGER .)
    *               reduce using rule 45 (const -> INTEGER .)
    /               reduce using rule 45 (const -> INTEGER .)
    %               reduce using rule 45 (const -> INTEGER .)
    |               reduce using rule 45 (const -> INTEGER .)
    &               reduce using rule 45 (const -> INTEGER .)
    ^               reduce using rule 45 (const -> INTEGER .)
    AND             reduce using rule 45 (const -> INTEGER .)
    OR              reduce using rule 45 (const -> INTEGER .)
    SHL             reduce using rule 45 (const -> INTEGER .)
    SHR             reduce using rule 45 (const -> INTEGER .)
    EQ              reduce using rule 45 (const -> INTEGER .)
    NEQ             reduce using rule 45 (const -> INTEGER .)
    >               reduce using rule 45 (const -> INTEGER .)
    <               reduce using rule 45 (const -> INTEGER .)
    LE              reduce using rule 45 (const -> INTEGER .)
    GE              reduce using rule 45 (const -> INTEGER .)
    ;               reduce using rule 45 (const -> INTEGER .)
    ,               reduce using rule 45 (const -> INTEGER .)
    )               reduce using rule 45 (const -> INTEGER .)


state 33

    (43) compound_instr -> { . declarations instructions_opt }
    (7) declarations -> . declarations declaration
    (8) declarations -> .

    TYPE            reduce using rule 8 (declarations -> .)
    error           reduce using rule 8 (declarations -> .)
    PRINT           reduce using rule 8 (declarations -> .)
    ID              reduce using rule 8 (declarations -> .)
    IF              reduce using rule 8 (declarations -> .)
    WHILE           reduce using rule 8 (declarations -> .)
    REPEAT          reduce using rule 8 (declarations -> .)
    RETURN          reduce using rule 8 (declarations -> .)
    BREAK           reduce using rule 8 (declarations -> .)
    CONTINUE        reduce using rule 8 (declarations -> .)
    {               reduce using rule 8 (declarations -> .)
    (               reduce using rule 8 (declarations -> .)
    INTEGER         reduce using rule 8 (declarations -> .)
    FLOAT           reduce using rule 8 (declarations -> .)
    STRING          reduce using rule 8 (declarations -> .)
    }               reduce using rule 8 (declarations -> .)

    declarations                   shift and go to state 73

state 34

    (50) expression -> expression + . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 74
    const                          shift and go to state 27

state 35

    (53) expression -> expression / . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 75
    const                          shift and go to state 27

state 36

    (59) expression -> expression OR . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 76
    const                          shift and go to state 27

state 37

    (51) expression -> expression - . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 77
    const                          shift and go to state 27

state 38

    (57) expression -> expression ^ . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 78
    const                          shift and go to state 27

state 39

    (54) expression -> expression % . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 79
    const                          shift and go to state 27

state 40

    (56) expression -> expression & . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 80
    const                          shift and go to state 27

state 41

    (61) expression -> expression SHR . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 81
    const                          shift and go to state 27

state 42

    (65) expression -> expression < . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 82
    const                          shift and go to state 27

state 43

    (52) expression -> expression * . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 83
    const                          shift and go to state 27

state 44

    (62) expression -> expression EQ . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 84
    const                          shift and go to state 27

state 45

    (66) expression -> expression LE . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 85
    const                          shift and go to state 27

state 46

    (67) expression -> expression GE . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 86
    const                          shift and go to state 27

state 47

    (60) expression -> expression SHL . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 87
    const                          shift and go to state 27

state 48

    (58) expression -> expression AND . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 88
    const                          shift and go to state 27

state 49

    (55) expression -> expression | . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 89
    const                          shift and go to state 27

state 50

    (64) expression -> expression > . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 90
    const                          shift and go to state 27

state 51

    (28) instruction -> expression ; .

    TYPE            reduce using rule 28 (instruction -> expression ; .)
    error           reduce using rule 28 (instruction -> expression ; .)
    PRINT           reduce using rule 28 (instruction -> expression ; .)
    ID              reduce using rule 28 (instruction -> expression ; .)
    IF              reduce using rule 28 (instruction -> expression ; .)
    WHILE           reduce using rule 28 (instruction -> expression ; .)
    REPEAT          reduce using rule 28 (instruction -> expression ; .)
    RETURN          reduce using rule 28 (instruction -> expression ; .)
    BREAK           reduce using rule 28 (instruction -> expression ; .)
    CONTINUE        reduce using rule 28 (instruction -> expression ; .)
    {               reduce using rule 28 (instruction -> expression ; .)
    (               reduce using rule 28 (instruction -> expression ; .)
    INTEGER         reduce using rule 28 (instruction -> expression ; .)
    FLOAT           reduce using rule 28 (instruction -> expression ; .)
    STRING          reduce using rule 28 (instruction -> expression ; .)
    $end            reduce using rule 28 (instruction -> expression ; .)
    UNTIL           reduce using rule 28 (instruction -> expression ; .)
    }               reduce using rule 28 (instruction -> expression ; .)
    ELSE            reduce using rule 28 (instruction -> expression ; .)


state 52

    (63) expression -> expression NEQ . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 91
    const                          shift and go to state 27

state 53

    (31) labeled_instr -> ID : . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 92
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 54

    (70) expression -> ID ( . expr_list_or_empty )
    (71) expression -> ID ( . error )
    (72) expr_list_or_empty -> . expr_list
    (73) expr_list_or_empty -> .
    (74) expr_list -> . expr_list , expression
    (75) expr_list -> . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    error           shift and go to state 93
    )               reduce using rule 73 (expr_list_or_empty -> .)
    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 56
    expr_list                      shift and go to state 94
    const                          shift and go to state 27
    expr_list_or_empty             shift and go to state 95

state 55

    (32) assignment -> ID = . expression ;
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 96
    const                          shift and go to state 27

state 56

    (75) expr_list -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               reduce using rule 75 (expr_list -> expression .)
    ,               reduce using rule 75 (expr_list -> expression .)
    )               reduce using rule 75 (expr_list -> expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 57

    (30) print_instr -> PRINT error . ;

    ;               shift and go to state 97


state 58

    (29) print_instr -> PRINT expr_list . ;
    (74) expr_list -> expr_list . , expression

    ;               shift and go to state 99
    ,               shift and go to state 98


state 59

    (49) expression -> ID .
    (70) expression -> ID . ( expr_list_or_empty )
    (71) expression -> ID . ( error )

    +               reduce using rule 49 (expression -> ID .)
    -               reduce using rule 49 (expression -> ID .)
    *               reduce using rule 49 (expression -> ID .)
    /               reduce using rule 49 (expression -> ID .)
    %               reduce using rule 49 (expression -> ID .)
    |               reduce using rule 49 (expression -> ID .)
    &               reduce using rule 49 (expression -> ID .)
    ^               reduce using rule 49 (expression -> ID .)
    AND             reduce using rule 49 (expression -> ID .)
    OR              reduce using rule 49 (expression -> ID .)
    SHL             reduce using rule 49 (expression -> ID .)
    SHR             reduce using rule 49 (expression -> ID .)
    EQ              reduce using rule 49 (expression -> ID .)
    NEQ             reduce using rule 49 (expression -> ID .)
    >               reduce using rule 49 (expression -> ID .)
    <               reduce using rule 49 (expression -> ID .)
    LE              reduce using rule 49 (expression -> ID .)
    GE              reduce using rule 49 (expression -> ID .)
    ;               reduce using rule 49 (expression -> ID .)
    ,               reduce using rule 49 (expression -> ID .)
    )               reduce using rule 49 (expression -> ID .)
    (               shift and go to state 54


state 60

    (42) break_instr -> BREAK ; .

    TYPE            reduce using rule 42 (break_instr -> BREAK ; .)
    error           reduce using rule 42 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 42 (break_instr -> BREAK ; .)
    ID              reduce using rule 42 (break_instr -> BREAK ; .)
    IF              reduce using rule 42 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 42 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 42 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 42 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 42 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 42 (break_instr -> BREAK ; .)
    {               reduce using rule 42 (break_instr -> BREAK ; .)
    (               reduce using rule 42 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 42 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 42 (break_instr -> BREAK ; .)
    STRING          reduce using rule 42 (break_instr -> BREAK ; .)
    $end            reduce using rule 42 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 42 (break_instr -> BREAK ; .)
    }               reduce using rule 42 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 42 (break_instr -> BREAK ; .)


state 61

    (76) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (13) init -> ID . = expression

    (               shift and go to state 100
    =               shift and go to state 101


state 62

    (9) declaration -> TYPE inits . ;
    (11) inits -> inits . , init

    ;               shift and go to state 103
    ,               shift and go to state 102


state 63

    (12) inits -> init .

    ;               reduce using rule 12 (inits -> init .)
    ,               reduce using rule 12 (inits -> init .)


state 64

    (39) repeat_instr -> REPEAT instructions . UNTIL condition ;
    (16) instructions -> instructions . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    UNTIL           shift and go to state 104
    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 105
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 65

    (17) instructions -> instruction .

    UNTIL           reduce using rule 17 (instructions -> instruction .)
    PRINT           reduce using rule 17 (instructions -> instruction .)
    ID              reduce using rule 17 (instructions -> instruction .)
    IF              reduce using rule 17 (instructions -> instruction .)
    WHILE           reduce using rule 17 (instructions -> instruction .)
    REPEAT          reduce using rule 17 (instructions -> instruction .)
    RETURN          reduce using rule 17 (instructions -> instruction .)
    BREAK           reduce using rule 17 (instructions -> instruction .)
    CONTINUE        reduce using rule 17 (instructions -> instruction .)
    {               reduce using rule 17 (instructions -> instruction .)
    (               reduce using rule 17 (instructions -> instruction .)
    INTEGER         reduce using rule 17 (instructions -> instruction .)
    FLOAT           reduce using rule 17 (instructions -> instruction .)
    STRING          reduce using rule 17 (instructions -> instruction .)
    }               reduce using rule 17 (instructions -> instruction .)


state 66

    (37) while_instr -> WHILE ( . condition ) instruction
    (38) while_instr -> WHILE ( . error ) instruction
    (44) condition -> . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    error           shift and go to state 107
    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 106
    const                          shift and go to state 27
    condition                      shift and go to state 108

state 67

    (68) expression -> ( expression . )
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    )               shift and go to state 109
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 68

    (69) expression -> ( error . )

    )               shift and go to state 110


state 69

    (10) declaration -> error ; .

    TYPE            reduce using rule 10 (declaration -> error ; .)
    error           reduce using rule 10 (declaration -> error ; .)
    PRINT           reduce using rule 10 (declaration -> error ; .)
    ID              reduce using rule 10 (declaration -> error ; .)
    IF              reduce using rule 10 (declaration -> error ; .)
    WHILE           reduce using rule 10 (declaration -> error ; .)
    REPEAT          reduce using rule 10 (declaration -> error ; .)
    RETURN          reduce using rule 10 (declaration -> error ; .)
    BREAK           reduce using rule 10 (declaration -> error ; .)
    CONTINUE        reduce using rule 10 (declaration -> error ; .)
    {               reduce using rule 10 (declaration -> error ; .)
    (               reduce using rule 10 (declaration -> error ; .)
    INTEGER         reduce using rule 10 (declaration -> error ; .)
    FLOAT           reduce using rule 10 (declaration -> error ; .)
    STRING          reduce using rule 10 (declaration -> error ; .)
    $end            reduce using rule 10 (declaration -> error ; .)
    }               reduce using rule 10 (declaration -> error ; .)


state 70

    (40) return_instr -> RETURN expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 111
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 71

    (41) continue_instr -> CONTINUE ; .

    PRINT           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 41 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 41 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 41 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 41 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 41 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 41 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 41 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    TYPE            reduce using rule 41 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 41 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 41 (continue_instr -> CONTINUE ; .)


state 72

    (33) choice_instr -> IF ( . condition ) instruction
    (34) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (35) choice_instr -> IF ( . error ) instruction
    (36) choice_instr -> IF ( . error ) instruction ELSE instruction
    (44) condition -> . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    error           shift and go to state 112
    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 106
    const                          shift and go to state 27
    condition                      shift and go to state 113

state 73

    (43) compound_instr -> { declarations . instructions_opt }
    (7) declarations -> declarations . declaration
    (14) instructions_opt -> . instructions
    (15) instructions_opt -> .
    (9) declaration -> . TYPE inits ;
    (10) declaration -> . error ;
    (16) instructions -> . instructions instruction
    (17) instructions -> . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    }               reduce using rule 15 (instructions_opt -> .)
    TYPE            shift and go to state 115
    error           shift and go to state 18
    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 65
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    break_instr                    shift and go to state 10
    instructions                   shift and go to state 114
    instructions_opt               shift and go to state 116
    compound_instr                 shift and go to state 20
    declaration                    shift and go to state 117

state 74

    (50) expression -> expression + expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 50 (expression -> expression + expression .)
    -               reduce using rule 50 (expression -> expression + expression .)
    |               reduce using rule 50 (expression -> expression + expression .)
    &               reduce using rule 50 (expression -> expression + expression .)
    ^               reduce using rule 50 (expression -> expression + expression .)
    AND             reduce using rule 50 (expression -> expression + expression .)
    OR              reduce using rule 50 (expression -> expression + expression .)
    SHL             reduce using rule 50 (expression -> expression + expression .)
    SHR             reduce using rule 50 (expression -> expression + expression .)
    EQ              reduce using rule 50 (expression -> expression + expression .)
    NEQ             reduce using rule 50 (expression -> expression + expression .)
    >               reduce using rule 50 (expression -> expression + expression .)
    <               reduce using rule 50 (expression -> expression + expression .)
    LE              reduce using rule 50 (expression -> expression + expression .)
    GE              reduce using rule 50 (expression -> expression + expression .)
    ;               reduce using rule 50 (expression -> expression + expression .)
    ,               reduce using rule 50 (expression -> expression + expression .)
    )               reduce using rule 50 (expression -> expression + expression .)
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39

  ! *               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 37 ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 75

    (53) expression -> expression / expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 53 (expression -> expression / expression .)
    -               reduce using rule 53 (expression -> expression / expression .)
    *               reduce using rule 53 (expression -> expression / expression .)
    /               reduce using rule 53 (expression -> expression / expression .)
    %               reduce using rule 53 (expression -> expression / expression .)
    |               reduce using rule 53 (expression -> expression / expression .)
    &               reduce using rule 53 (expression -> expression / expression .)
    ^               reduce using rule 53 (expression -> expression / expression .)
    AND             reduce using rule 53 (expression -> expression / expression .)
    OR              reduce using rule 53 (expression -> expression / expression .)
    SHL             reduce using rule 53 (expression -> expression / expression .)
    SHR             reduce using rule 53 (expression -> expression / expression .)
    EQ              reduce using rule 53 (expression -> expression / expression .)
    NEQ             reduce using rule 53 (expression -> expression / expression .)
    >               reduce using rule 53 (expression -> expression / expression .)
    <               reduce using rule 53 (expression -> expression / expression .)
    LE              reduce using rule 53 (expression -> expression / expression .)
    GE              reduce using rule 53 (expression -> expression / expression .)
    ;               reduce using rule 53 (expression -> expression / expression .)
    ,               reduce using rule 53 (expression -> expression / expression .)
    )               reduce using rule 53 (expression -> expression / expression .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 43 ]
  ! /               [ shift and go to state 35 ]
  ! %               [ shift and go to state 39 ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 76

    (59) expression -> expression OR expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    OR              reduce using rule 59 (expression -> expression OR expression .)
    ;               reduce using rule 59 (expression -> expression OR expression .)
    ,               reduce using rule 59 (expression -> expression OR expression .)
    )               reduce using rule 59 (expression -> expression OR expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46

  ! +               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 36 ]


state 77

    (51) expression -> expression - expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 51 (expression -> expression - expression .)
    -               reduce using rule 51 (expression -> expression - expression .)
    |               reduce using rule 51 (expression -> expression - expression .)
    &               reduce using rule 51 (expression -> expression - expression .)
    ^               reduce using rule 51 (expression -> expression - expression .)
    AND             reduce using rule 51 (expression -> expression - expression .)
    OR              reduce using rule 51 (expression -> expression - expression .)
    SHL             reduce using rule 51 (expression -> expression - expression .)
    SHR             reduce using rule 51 (expression -> expression - expression .)
    EQ              reduce using rule 51 (expression -> expression - expression .)
    NEQ             reduce using rule 51 (expression -> expression - expression .)
    >               reduce using rule 51 (expression -> expression - expression .)
    <               reduce using rule 51 (expression -> expression - expression .)
    LE              reduce using rule 51 (expression -> expression - expression .)
    GE              reduce using rule 51 (expression -> expression - expression .)
    ;               reduce using rule 51 (expression -> expression - expression .)
    ,               reduce using rule 51 (expression -> expression - expression .)
    )               reduce using rule 51 (expression -> expression - expression .)
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39

  ! *               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 37 ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 78

    (57) expression -> expression ^ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression ^ expression .)
    ^               reduce using rule 57 (expression -> expression ^ expression .)
    AND             reduce using rule 57 (expression -> expression ^ expression .)
    OR              reduce using rule 57 (expression -> expression ^ expression .)
    ;               reduce using rule 57 (expression -> expression ^ expression .)
    ,               reduce using rule 57 (expression -> expression ^ expression .)
    )               reduce using rule 57 (expression -> expression ^ expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    &               shift and go to state 40
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46

  ! +               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 49 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]


state 79

    (54) expression -> expression % expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 54 (expression -> expression % expression .)
    -               reduce using rule 54 (expression -> expression % expression .)
    *               reduce using rule 54 (expression -> expression % expression .)
    /               reduce using rule 54 (expression -> expression % expression .)
    %               reduce using rule 54 (expression -> expression % expression .)
    |               reduce using rule 54 (expression -> expression % expression .)
    &               reduce using rule 54 (expression -> expression % expression .)
    ^               reduce using rule 54 (expression -> expression % expression .)
    AND             reduce using rule 54 (expression -> expression % expression .)
    OR              reduce using rule 54 (expression -> expression % expression .)
    SHL             reduce using rule 54 (expression -> expression % expression .)
    SHR             reduce using rule 54 (expression -> expression % expression .)
    EQ              reduce using rule 54 (expression -> expression % expression .)
    NEQ             reduce using rule 54 (expression -> expression % expression .)
    >               reduce using rule 54 (expression -> expression % expression .)
    <               reduce using rule 54 (expression -> expression % expression .)
    LE              reduce using rule 54 (expression -> expression % expression .)
    GE              reduce using rule 54 (expression -> expression % expression .)
    ;               reduce using rule 54 (expression -> expression % expression .)
    ,               reduce using rule 54 (expression -> expression % expression .)
    )               reduce using rule 54 (expression -> expression % expression .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 43 ]
  ! /               [ shift and go to state 35 ]
  ! %               [ shift and go to state 39 ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 80

    (56) expression -> expression & expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 56 (expression -> expression & expression .)
    &               reduce using rule 56 (expression -> expression & expression .)
    ^               reduce using rule 56 (expression -> expression & expression .)
    AND             reduce using rule 56 (expression -> expression & expression .)
    OR              reduce using rule 56 (expression -> expression & expression .)
    ;               reduce using rule 56 (expression -> expression & expression .)
    ,               reduce using rule 56 (expression -> expression & expression .)
    )               reduce using rule 56 (expression -> expression & expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46

  ! +               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 56 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 56 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]


state 81

    (61) expression -> expression SHR expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 61 (expression -> expression SHR expression .)
    &               reduce using rule 61 (expression -> expression SHR expression .)
    ^               reduce using rule 61 (expression -> expression SHR expression .)
    AND             reduce using rule 61 (expression -> expression SHR expression .)
    OR              reduce using rule 61 (expression -> expression SHR expression .)
    SHL             reduce using rule 61 (expression -> expression SHR expression .)
    SHR             reduce using rule 61 (expression -> expression SHR expression .)
    EQ              reduce using rule 61 (expression -> expression SHR expression .)
    NEQ             reduce using rule 61 (expression -> expression SHR expression .)
    >               reduce using rule 61 (expression -> expression SHR expression .)
    <               reduce using rule 61 (expression -> expression SHR expression .)
    LE              reduce using rule 61 (expression -> expression SHR expression .)
    GE              reduce using rule 61 (expression -> expression SHR expression .)
    ;               reduce using rule 61 (expression -> expression SHR expression .)
    ,               reduce using rule 61 (expression -> expression SHR expression .)
    )               reduce using rule 61 (expression -> expression SHR expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39

  ! +               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 82

    (65) expression -> expression < expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 65 (expression -> expression < expression .)
    &               reduce using rule 65 (expression -> expression < expression .)
    ^               reduce using rule 65 (expression -> expression < expression .)
    AND             reduce using rule 65 (expression -> expression < expression .)
    OR              reduce using rule 65 (expression -> expression < expression .)
    EQ              reduce using rule 65 (expression -> expression < expression .)
    NEQ             reduce using rule 65 (expression -> expression < expression .)
    >               reduce using rule 65 (expression -> expression < expression .)
    <               reduce using rule 65 (expression -> expression < expression .)
    LE              reduce using rule 65 (expression -> expression < expression .)
    GE              reduce using rule 65 (expression -> expression < expression .)
    ;               reduce using rule 65 (expression -> expression < expression .)
    ,               reduce using rule 65 (expression -> expression < expression .)
    )               reduce using rule 65 (expression -> expression < expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41

  ! +               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 65 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 65 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 83

    (52) expression -> expression * expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 52 (expression -> expression * expression .)
    -               reduce using rule 52 (expression -> expression * expression .)
    *               reduce using rule 52 (expression -> expression * expression .)
    /               reduce using rule 52 (expression -> expression * expression .)
    %               reduce using rule 52 (expression -> expression * expression .)
    |               reduce using rule 52 (expression -> expression * expression .)
    &               reduce using rule 52 (expression -> expression * expression .)
    ^               reduce using rule 52 (expression -> expression * expression .)
    AND             reduce using rule 52 (expression -> expression * expression .)
    OR              reduce using rule 52 (expression -> expression * expression .)
    SHL             reduce using rule 52 (expression -> expression * expression .)
    SHR             reduce using rule 52 (expression -> expression * expression .)
    EQ              reduce using rule 52 (expression -> expression * expression .)
    NEQ             reduce using rule 52 (expression -> expression * expression .)
    >               reduce using rule 52 (expression -> expression * expression .)
    <               reduce using rule 52 (expression -> expression * expression .)
    LE              reduce using rule 52 (expression -> expression * expression .)
    GE              reduce using rule 52 (expression -> expression * expression .)
    ;               reduce using rule 52 (expression -> expression * expression .)
    ,               reduce using rule 52 (expression -> expression * expression .)
    )               reduce using rule 52 (expression -> expression * expression .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 43 ]
  ! /               [ shift and go to state 35 ]
  ! %               [ shift and go to state 39 ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 84

    (62) expression -> expression EQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression EQ expression .)
    &               reduce using rule 62 (expression -> expression EQ expression .)
    ^               reduce using rule 62 (expression -> expression EQ expression .)
    AND             reduce using rule 62 (expression -> expression EQ expression .)
    OR              reduce using rule 62 (expression -> expression EQ expression .)
    EQ              reduce using rule 62 (expression -> expression EQ expression .)
    NEQ             reduce using rule 62 (expression -> expression EQ expression .)
    >               reduce using rule 62 (expression -> expression EQ expression .)
    <               reduce using rule 62 (expression -> expression EQ expression .)
    LE              reduce using rule 62 (expression -> expression EQ expression .)
    GE              reduce using rule 62 (expression -> expression EQ expression .)
    ;               reduce using rule 62 (expression -> expression EQ expression .)
    ,               reduce using rule 62 (expression -> expression EQ expression .)
    )               reduce using rule 62 (expression -> expression EQ expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41

  ! +               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 85

    (66) expression -> expression LE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 66 (expression -> expression LE expression .)
    &               reduce using rule 66 (expression -> expression LE expression .)
    ^               reduce using rule 66 (expression -> expression LE expression .)
    AND             reduce using rule 66 (expression -> expression LE expression .)
    OR              reduce using rule 66 (expression -> expression LE expression .)
    EQ              reduce using rule 66 (expression -> expression LE expression .)
    NEQ             reduce using rule 66 (expression -> expression LE expression .)
    >               reduce using rule 66 (expression -> expression LE expression .)
    <               reduce using rule 66 (expression -> expression LE expression .)
    LE              reduce using rule 66 (expression -> expression LE expression .)
    GE              reduce using rule 66 (expression -> expression LE expression .)
    ;               reduce using rule 66 (expression -> expression LE expression .)
    ,               reduce using rule 66 (expression -> expression LE expression .)
    )               reduce using rule 66 (expression -> expression LE expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41

  ! +               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 86

    (67) expression -> expression GE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 67 (expression -> expression GE expression .)
    &               reduce using rule 67 (expression -> expression GE expression .)
    ^               reduce using rule 67 (expression -> expression GE expression .)
    AND             reduce using rule 67 (expression -> expression GE expression .)
    OR              reduce using rule 67 (expression -> expression GE expression .)
    EQ              reduce using rule 67 (expression -> expression GE expression .)
    NEQ             reduce using rule 67 (expression -> expression GE expression .)
    >               reduce using rule 67 (expression -> expression GE expression .)
    <               reduce using rule 67 (expression -> expression GE expression .)
    LE              reduce using rule 67 (expression -> expression GE expression .)
    GE              reduce using rule 67 (expression -> expression GE expression .)
    ;               reduce using rule 67 (expression -> expression GE expression .)
    ,               reduce using rule 67 (expression -> expression GE expression .)
    )               reduce using rule 67 (expression -> expression GE expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41

  ! +               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 87

    (60) expression -> expression SHL expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 60 (expression -> expression SHL expression .)
    &               reduce using rule 60 (expression -> expression SHL expression .)
    ^               reduce using rule 60 (expression -> expression SHL expression .)
    AND             reduce using rule 60 (expression -> expression SHL expression .)
    OR              reduce using rule 60 (expression -> expression SHL expression .)
    SHL             reduce using rule 60 (expression -> expression SHL expression .)
    SHR             reduce using rule 60 (expression -> expression SHL expression .)
    EQ              reduce using rule 60 (expression -> expression SHL expression .)
    NEQ             reduce using rule 60 (expression -> expression SHL expression .)
    >               reduce using rule 60 (expression -> expression SHL expression .)
    <               reduce using rule 60 (expression -> expression SHL expression .)
    LE              reduce using rule 60 (expression -> expression SHL expression .)
    GE              reduce using rule 60 (expression -> expression SHL expression .)
    ;               reduce using rule 60 (expression -> expression SHL expression .)
    ,               reduce using rule 60 (expression -> expression SHL expression .)
    )               reduce using rule 60 (expression -> expression SHL expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39

  ! +               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! SHL             [ shift and go to state 47 ]
  ! SHR             [ shift and go to state 41 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 88

    (58) expression -> expression AND expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    AND             reduce using rule 58 (expression -> expression AND expression .)
    OR              reduce using rule 58 (expression -> expression AND expression .)
    ;               reduce using rule 58 (expression -> expression AND expression .)
    ,               reduce using rule 58 (expression -> expression AND expression .)
    )               reduce using rule 58 (expression -> expression AND expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46

  ! +               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]


state 89

    (55) expression -> expression | expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 55 (expression -> expression | expression .)
    AND             reduce using rule 55 (expression -> expression | expression .)
    OR              reduce using rule 55 (expression -> expression | expression .)
    ;               reduce using rule 55 (expression -> expression | expression .)
    ,               reduce using rule 55 (expression -> expression | expression .)
    )               reduce using rule 55 (expression -> expression | expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    &               shift and go to state 40
    ^               shift and go to state 38
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46

  ! +               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 55 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 55 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 49 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]


state 90

    (64) expression -> expression > expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 64 (expression -> expression > expression .)
    &               reduce using rule 64 (expression -> expression > expression .)
    ^               reduce using rule 64 (expression -> expression > expression .)
    AND             reduce using rule 64 (expression -> expression > expression .)
    OR              reduce using rule 64 (expression -> expression > expression .)
    EQ              reduce using rule 64 (expression -> expression > expression .)
    NEQ             reduce using rule 64 (expression -> expression > expression .)
    >               reduce using rule 64 (expression -> expression > expression .)
    <               reduce using rule 64 (expression -> expression > expression .)
    LE              reduce using rule 64 (expression -> expression > expression .)
    GE              reduce using rule 64 (expression -> expression > expression .)
    ;               reduce using rule 64 (expression -> expression > expression .)
    ,               reduce using rule 64 (expression -> expression > expression .)
    )               reduce using rule 64 (expression -> expression > expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41

  ! +               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 64 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 64 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 91

    (63) expression -> expression NEQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression NEQ expression .)
    &               reduce using rule 63 (expression -> expression NEQ expression .)
    ^               reduce using rule 63 (expression -> expression NEQ expression .)
    AND             reduce using rule 63 (expression -> expression NEQ expression .)
    OR              reduce using rule 63 (expression -> expression NEQ expression .)
    EQ              reduce using rule 63 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 63 (expression -> expression NEQ expression .)
    >               reduce using rule 63 (expression -> expression NEQ expression .)
    <               reduce using rule 63 (expression -> expression NEQ expression .)
    LE              reduce using rule 63 (expression -> expression NEQ expression .)
    GE              reduce using rule 63 (expression -> expression NEQ expression .)
    ;               reduce using rule 63 (expression -> expression NEQ expression .)
    ,               reduce using rule 63 (expression -> expression NEQ expression .)
    )               reduce using rule 63 (expression -> expression NEQ expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    SHL             shift and go to state 47
    SHR             shift and go to state 41

  ! +               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 49 ]
  ! &               [ shift and go to state 40 ]
  ! ^               [ shift and go to state 38 ]
  ! AND             [ shift and go to state 48 ]
  ! OR              [ shift and go to state 36 ]
  ! EQ              [ shift and go to state 44 ]
  ! NEQ             [ shift and go to state 52 ]
  ! >               [ shift and go to state 50 ]
  ! <               [ shift and go to state 42 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]


state 92

    (31) labeled_instr -> ID : instruction .

    UNTIL           reduce using rule 31 (labeled_instr -> ID : instruction .)
    PRINT           reduce using rule 31 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 31 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 31 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 31 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 31 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 31 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 31 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 31 (labeled_instr -> ID : instruction .)
    {               reduce using rule 31 (labeled_instr -> ID : instruction .)
    (               reduce using rule 31 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 31 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 31 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 31 (labeled_instr -> ID : instruction .)
    TYPE            reduce using rule 31 (labeled_instr -> ID : instruction .)
    error           reduce using rule 31 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 31 (labeled_instr -> ID : instruction .)
    }               reduce using rule 31 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 31 (labeled_instr -> ID : instruction .)


state 93

    (71) expression -> ID ( error . )

    )               shift and go to state 118


state 94

    (72) expr_list_or_empty -> expr_list .
    (74) expr_list -> expr_list . , expression

    )               reduce using rule 72 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 98


state 95

    (70) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 119


state 96

    (32) assignment -> ID = expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 120
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 97

    (30) print_instr -> PRINT error ; .

    TYPE            reduce using rule 30 (print_instr -> PRINT error ; .)
    error           reduce using rule 30 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 30 (print_instr -> PRINT error ; .)
    ID              reduce using rule 30 (print_instr -> PRINT error ; .)
    IF              reduce using rule 30 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 30 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 30 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 30 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 30 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 30 (print_instr -> PRINT error ; .)
    {               reduce using rule 30 (print_instr -> PRINT error ; .)
    (               reduce using rule 30 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 30 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 30 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 30 (print_instr -> PRINT error ; .)
    $end            reduce using rule 30 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 30 (print_instr -> PRINT error ; .)
    }               reduce using rule 30 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 30 (print_instr -> PRINT error ; .)


state 98

    (74) expr_list -> expr_list , . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 121
    const                          shift and go to state 27

state 99

    (29) print_instr -> PRINT expr_list ; .

    TYPE            reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    error           reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    PRINT           reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    ID              reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    IF              reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    WHILE           reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    REPEAT          reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    RETURN          reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    BREAK           reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    {               reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    (               reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    INTEGER         reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    FLOAT           reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    STRING          reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    $end            reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    UNTIL           reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    }               reduce using rule 29 (print_instr -> PRINT expr_list ; .)
    ELSE            reduce using rule 29 (print_instr -> PRINT expr_list ; .)


state 100

    (76) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (77) args_list_or_empty -> . args_list
    (78) args_list_or_empty -> .
    (79) args_list -> . args_list , arg
    (80) args_list -> . arg
    (81) arg -> . TYPE ID

    )               reduce using rule 78 (args_list_or_empty -> .)
    TYPE            shift and go to state 122

    args_list                      shift and go to state 124
    arg                            shift and go to state 125
    args_list_or_empty             shift and go to state 123

state 101

    (13) init -> ID = . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 126
    const                          shift and go to state 27

state 102

    (11) inits -> inits , . init
    (13) init -> . ID = expression

    ID              shift and go to state 128

    init                           shift and go to state 127

state 103

    (9) declaration -> TYPE inits ; .

    TYPE            reduce using rule 9 (declaration -> TYPE inits ; .)
    error           reduce using rule 9 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 9 (declaration -> TYPE inits ; .)
    ID              reduce using rule 9 (declaration -> TYPE inits ; .)
    IF              reduce using rule 9 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 9 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 9 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 9 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 9 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 9 (declaration -> TYPE inits ; .)
    {               reduce using rule 9 (declaration -> TYPE inits ; .)
    (               reduce using rule 9 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 9 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 9 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 9 (declaration -> TYPE inits ; .)
    $end            reduce using rule 9 (declaration -> TYPE inits ; .)
    }               reduce using rule 9 (declaration -> TYPE inits ; .)


state 104

    (39) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (44) condition -> . expression
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    ID              shift and go to state 59
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    expression                     shift and go to state 106
    const                          shift and go to state 27
    condition                      shift and go to state 129

state 105

    (16) instructions -> instructions instruction .

    UNTIL           reduce using rule 16 (instructions -> instructions instruction .)
    PRINT           reduce using rule 16 (instructions -> instructions instruction .)
    ID              reduce using rule 16 (instructions -> instructions instruction .)
    IF              reduce using rule 16 (instructions -> instructions instruction .)
    WHILE           reduce using rule 16 (instructions -> instructions instruction .)
    REPEAT          reduce using rule 16 (instructions -> instructions instruction .)
    RETURN          reduce using rule 16 (instructions -> instructions instruction .)
    BREAK           reduce using rule 16 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 16 (instructions -> instructions instruction .)
    {               reduce using rule 16 (instructions -> instructions instruction .)
    (               reduce using rule 16 (instructions -> instructions instruction .)
    INTEGER         reduce using rule 16 (instructions -> instructions instruction .)
    FLOAT           reduce using rule 16 (instructions -> instructions instruction .)
    STRING          reduce using rule 16 (instructions -> instructions instruction .)
    }               reduce using rule 16 (instructions -> instructions instruction .)


state 106

    (44) condition -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    )               reduce using rule 44 (condition -> expression .)
    ;               reduce using rule 44 (condition -> expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 107

    (38) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 130


state 108

    (37) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 131


state 109

    (68) expression -> ( expression ) .

    +               reduce using rule 68 (expression -> ( expression ) .)
    -               reduce using rule 68 (expression -> ( expression ) .)
    *               reduce using rule 68 (expression -> ( expression ) .)
    /               reduce using rule 68 (expression -> ( expression ) .)
    %               reduce using rule 68 (expression -> ( expression ) .)
    |               reduce using rule 68 (expression -> ( expression ) .)
    &               reduce using rule 68 (expression -> ( expression ) .)
    ^               reduce using rule 68 (expression -> ( expression ) .)
    AND             reduce using rule 68 (expression -> ( expression ) .)
    OR              reduce using rule 68 (expression -> ( expression ) .)
    SHL             reduce using rule 68 (expression -> ( expression ) .)
    SHR             reduce using rule 68 (expression -> ( expression ) .)
    EQ              reduce using rule 68 (expression -> ( expression ) .)
    NEQ             reduce using rule 68 (expression -> ( expression ) .)
    >               reduce using rule 68 (expression -> ( expression ) .)
    <               reduce using rule 68 (expression -> ( expression ) .)
    LE              reduce using rule 68 (expression -> ( expression ) .)
    GE              reduce using rule 68 (expression -> ( expression ) .)
    ;               reduce using rule 68 (expression -> ( expression ) .)
    ,               reduce using rule 68 (expression -> ( expression ) .)
    )               reduce using rule 68 (expression -> ( expression ) .)


state 110

    (69) expression -> ( error ) .

    +               reduce using rule 69 (expression -> ( error ) .)
    -               reduce using rule 69 (expression -> ( error ) .)
    *               reduce using rule 69 (expression -> ( error ) .)
    /               reduce using rule 69 (expression -> ( error ) .)
    %               reduce using rule 69 (expression -> ( error ) .)
    |               reduce using rule 69 (expression -> ( error ) .)
    &               reduce using rule 69 (expression -> ( error ) .)
    ^               reduce using rule 69 (expression -> ( error ) .)
    AND             reduce using rule 69 (expression -> ( error ) .)
    OR              reduce using rule 69 (expression -> ( error ) .)
    SHL             reduce using rule 69 (expression -> ( error ) .)
    SHR             reduce using rule 69 (expression -> ( error ) .)
    EQ              reduce using rule 69 (expression -> ( error ) .)
    NEQ             reduce using rule 69 (expression -> ( error ) .)
    >               reduce using rule 69 (expression -> ( error ) .)
    <               reduce using rule 69 (expression -> ( error ) .)
    LE              reduce using rule 69 (expression -> ( error ) .)
    GE              reduce using rule 69 (expression -> ( error ) .)
    ;               reduce using rule 69 (expression -> ( error ) .)
    ,               reduce using rule 69 (expression -> ( error ) .)
    )               reduce using rule 69 (expression -> ( error ) .)


state 111

    (40) return_instr -> RETURN expression ; .

    TYPE            reduce using rule 40 (return_instr -> RETURN expression ; .)
    error           reduce using rule 40 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 40 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 40 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 40 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 40 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 40 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 40 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 40 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 40 (return_instr -> RETURN expression ; .)
    {               reduce using rule 40 (return_instr -> RETURN expression ; .)
    (               reduce using rule 40 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 40 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 40 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 40 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 40 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 40 (return_instr -> RETURN expression ; .)
    }               reduce using rule 40 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 40 (return_instr -> RETURN expression ; .)


state 112

    (35) choice_instr -> IF ( error . ) instruction
    (36) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 132


state 113

    (33) choice_instr -> IF ( condition . ) instruction
    (34) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 133


state 114

    (14) instructions_opt -> instructions .
    (16) instructions -> instructions . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    }               reduce using rule 14 (instructions_opt -> instructions .)
    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 105
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 115

    (9) declaration -> TYPE . inits ;
    (11) inits -> . inits , init
    (12) inits -> . init
    (13) init -> . ID = expression

    ID              shift and go to state 128

    init                           shift and go to state 63
    inits                          shift and go to state 62

state 116

    (43) compound_instr -> { declarations instructions_opt . }

    }               shift and go to state 134


state 117

    (7) declarations -> declarations declaration .

    TYPE            reduce using rule 7 (declarations -> declarations declaration .)
    error           reduce using rule 7 (declarations -> declarations declaration .)
    PRINT           reduce using rule 7 (declarations -> declarations declaration .)
    ID              reduce using rule 7 (declarations -> declarations declaration .)
    IF              reduce using rule 7 (declarations -> declarations declaration .)
    WHILE           reduce using rule 7 (declarations -> declarations declaration .)
    REPEAT          reduce using rule 7 (declarations -> declarations declaration .)
    RETURN          reduce using rule 7 (declarations -> declarations declaration .)
    BREAK           reduce using rule 7 (declarations -> declarations declaration .)
    CONTINUE        reduce using rule 7 (declarations -> declarations declaration .)
    {               reduce using rule 7 (declarations -> declarations declaration .)
    (               reduce using rule 7 (declarations -> declarations declaration .)
    INTEGER         reduce using rule 7 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 7 (declarations -> declarations declaration .)
    STRING          reduce using rule 7 (declarations -> declarations declaration .)
    }               reduce using rule 7 (declarations -> declarations declaration .)


state 118

    (71) expression -> ID ( error ) .

    +               reduce using rule 71 (expression -> ID ( error ) .)
    -               reduce using rule 71 (expression -> ID ( error ) .)
    *               reduce using rule 71 (expression -> ID ( error ) .)
    /               reduce using rule 71 (expression -> ID ( error ) .)
    %               reduce using rule 71 (expression -> ID ( error ) .)
    |               reduce using rule 71 (expression -> ID ( error ) .)
    &               reduce using rule 71 (expression -> ID ( error ) .)
    ^               reduce using rule 71 (expression -> ID ( error ) .)
    AND             reduce using rule 71 (expression -> ID ( error ) .)
    OR              reduce using rule 71 (expression -> ID ( error ) .)
    SHL             reduce using rule 71 (expression -> ID ( error ) .)
    SHR             reduce using rule 71 (expression -> ID ( error ) .)
    EQ              reduce using rule 71 (expression -> ID ( error ) .)
    NEQ             reduce using rule 71 (expression -> ID ( error ) .)
    >               reduce using rule 71 (expression -> ID ( error ) .)
    <               reduce using rule 71 (expression -> ID ( error ) .)
    LE              reduce using rule 71 (expression -> ID ( error ) .)
    GE              reduce using rule 71 (expression -> ID ( error ) .)
    ;               reduce using rule 71 (expression -> ID ( error ) .)
    ,               reduce using rule 71 (expression -> ID ( error ) .)
    )               reduce using rule 71 (expression -> ID ( error ) .)


state 119

    (70) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)


state 120

    (32) assignment -> ID = expression ; .

    PRINT           reduce using rule 32 (assignment -> ID = expression ; .)
    ID              reduce using rule 32 (assignment -> ID = expression ; .)
    IF              reduce using rule 32 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 32 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 32 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 32 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 32 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 32 (assignment -> ID = expression ; .)
    {               reduce using rule 32 (assignment -> ID = expression ; .)
    (               reduce using rule 32 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 32 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 32 (assignment -> ID = expression ; .)
    STRING          reduce using rule 32 (assignment -> ID = expression ; .)
    }               reduce using rule 32 (assignment -> ID = expression ; .)
    TYPE            reduce using rule 32 (assignment -> ID = expression ; .)
    error           reduce using rule 32 (assignment -> ID = expression ; .)
    $end            reduce using rule 32 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 32 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 32 (assignment -> ID = expression ; .)


state 121

    (74) expr_list -> expr_list , expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               reduce using rule 74 (expr_list -> expr_list , expression .)
    ,               reduce using rule 74 (expr_list -> expr_list , expression .)
    )               reduce using rule 74 (expr_list -> expr_list , expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 122

    (81) arg -> TYPE . ID

    ID              shift and go to state 135


state 123

    (76) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 136


state 124

    (77) args_list_or_empty -> args_list .
    (79) args_list -> args_list . , arg

    )               reduce using rule 77 (args_list_or_empty -> args_list .)
    ,               shift and go to state 137


state 125

    (80) args_list -> arg .

    ,               reduce using rule 80 (args_list -> arg .)
    )               reduce using rule 80 (args_list -> arg .)


state 126

    (13) init -> ID = expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               reduce using rule 13 (init -> ID = expression .)
    ,               reduce using rule 13 (init -> ID = expression .)
    +               shift and go to state 34
    -               shift and go to state 37
    *               shift and go to state 43
    /               shift and go to state 35
    %               shift and go to state 39
    |               shift and go to state 49
    &               shift and go to state 40
    ^               shift and go to state 38
    AND             shift and go to state 48
    OR              shift and go to state 36
    SHL             shift and go to state 47
    SHR             shift and go to state 41
    EQ              shift and go to state 44
    NEQ             shift and go to state 52
    >               shift and go to state 50
    <               shift and go to state 42
    LE              shift and go to state 45
    GE              shift and go to state 46


state 127

    (11) inits -> inits , init .

    ;               reduce using rule 11 (inits -> inits , init .)
    ,               reduce using rule 11 (inits -> inits , init .)


state 128

    (13) init -> ID . = expression

    =               shift and go to state 101


state 129

    (39) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 138


state 130

    (38) while_instr -> WHILE ( error ) . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 139
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 131

    (37) while_instr -> WHILE ( condition ) . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 140
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 132

    (35) choice_instr -> IF ( error ) . instruction
    (36) choice_instr -> IF ( error ) . instruction ELSE instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 141
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 133

    (33) choice_instr -> IF ( condition ) . instruction
    (34) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 142
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 134

    (43) compound_instr -> { declarations instructions_opt } .

    TYPE            reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    error           reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    PRINT           reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    ID              reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    IF              reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    WHILE           reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    REPEAT          reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    RETURN          reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    BREAK           reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    CONTINUE        reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    {               reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    (               reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    INTEGER         reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    FLOAT           reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    STRING          reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    $end            reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    UNTIL           reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    }               reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)
    ELSE            reduce using rule 43 (compound_instr -> { declarations instructions_opt } .)


state 135

    (81) arg -> TYPE ID .

    ,               reduce using rule 81 (arg -> TYPE ID .)
    )               reduce using rule 81 (arg -> TYPE ID .)


state 136

    (76) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (43) compound_instr -> . { declarations instructions_opt }

    {               shift and go to state 33

    compound_instr                 shift and go to state 143

state 137

    (79) args_list -> args_list , . arg
    (81) arg -> . TYPE ID

    TYPE            shift and go to state 122

    arg                            shift and go to state 144

state 138

    (39) repeat_instr -> REPEAT instructions UNTIL condition ; .

    TYPE            reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    error           reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    PRINT           reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    (               reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    INTEGER         reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    FLOAT           reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    STRING          reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    }               reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 39 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 139

    (38) while_instr -> WHILE ( error ) instruction .

    PRINT           reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    TYPE            reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 38 (while_instr -> WHILE ( error ) instruction .)


state 140

    (37) while_instr -> WHILE ( condition ) instruction .

    PRINT           reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    TYPE            reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 37 (while_instr -> WHILE ( condition ) instruction .)


state 141

    (35) choice_instr -> IF ( error ) instruction .
    (36) choice_instr -> IF ( error ) instruction . ELSE instruction

    TYPE            reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 35 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 145

  ! ELSE            [ reduce using rule 35 (choice_instr -> IF ( error ) instruction .) ]


state 142

    (33) choice_instr -> IF ( condition ) instruction .
    (34) choice_instr -> IF ( condition ) instruction . ELSE instruction

    TYPE            reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    PRINT           reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 33 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 146

  ! ELSE            [ reduce using rule 33 (choice_instr -> IF ( condition ) instruction .) ]


state 143

    (76) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 144

    (79) args_list -> args_list , arg .

    ,               reduce using rule 79 (args_list -> args_list , arg .)
    )               reduce using rule 79 (args_list -> args_list , arg .)


state 145

    (36) choice_instr -> IF ( error ) instruction ELSE . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 147
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 146

    (34) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (18) instruction -> . print_instr
    (19) instruction -> . labeled_instr
    (20) instruction -> . assignment
    (21) instruction -> . choice_instr
    (22) instruction -> . while_instr
    (23) instruction -> . repeat_instr
    (24) instruction -> . return_instr
    (25) instruction -> . break_instr
    (26) instruction -> . continue_instr
    (27) instruction -> . compound_instr
    (28) instruction -> . expression ;
    (29) print_instr -> . PRINT expr_list ;
    (30) print_instr -> . PRINT error ;
    (31) labeled_instr -> . ID : instruction
    (32) assignment -> . ID = expression ;
    (33) choice_instr -> . IF ( condition ) instruction
    (34) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (35) choice_instr -> . IF ( error ) instruction
    (36) choice_instr -> . IF ( error ) instruction ELSE instruction
    (37) while_instr -> . WHILE ( condition ) instruction
    (38) while_instr -> . WHILE ( error ) instruction
    (39) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (40) return_instr -> . RETURN expression ;
    (42) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (43) compound_instr -> . { declarations instructions_opt }
    (48) expression -> . const
    (49) expression -> . ID
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (45) const -> . INTEGER
    (46) const -> . FLOAT
    (47) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 5
    IF              shift and go to state 26
    WHILE           shift and go to state 15
    REPEAT          shift and go to state 13
    RETURN          shift and go to state 23
    BREAK           shift and go to state 7
    CONTINUE        shift and go to state 25
    {               shift and go to state 33
    (               shift and go to state 16
    INTEGER         shift and go to state 32
    FLOAT           shift and go to state 29
    STRING          shift and go to state 17

    instruction                    shift and go to state 148
    expression                     shift and go to state 3
    print_instr                    shift and go to state 8
    while_instr                    shift and go to state 9
    assignment                     shift and go to state 4
    const                          shift and go to state 27
    choice_instr                   shift and go to state 28
    continue_instr                 shift and go to state 19
    break_instr                    shift and go to state 10
    repeat_instr                   shift and go to state 31
    labeled_instr                  shift and go to state 11
    return_instr                   shift and go to state 30
    compound_instr                 shift and go to state 20

state 147

    (36) choice_instr -> IF ( error ) instruction ELSE instruction .

    TYPE            reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 36 (choice_instr -> IF ( error ) instruction ELSE instruction .)


state 148

    (34) choice_instr -> IF ( condition ) instruction ELSE instruction .

    TYPE            reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 34 (choice_instr -> IF ( condition ) instruction ELSE instruction .)

